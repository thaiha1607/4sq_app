package com.foursquare.server.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductQuantityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductQuantityAllPropertiesEquals(ProductQuantity expected, ProductQuantity actual) {
        assertProductQuantityAutoGeneratedPropertiesEquals(expected, actual);
        assertProductQuantityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductQuantityAllUpdatablePropertiesEquals(ProductQuantity expected, ProductQuantity actual) {
        assertProductQuantityUpdatableFieldsEquals(expected, actual);
        assertProductQuantityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductQuantityAutoGeneratedPropertiesEquals(ProductQuantity expected, ProductQuantity actual) {
        assertThat(expected)
            .as("Verify ProductQuantity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductQuantityUpdatableFieldsEquals(ProductQuantity expected, ProductQuantity actual) {
        assertThat(expected)
            .as("Verify ProductQuantity relevant properties")
            .satisfies(e -> assertThat(e.getQty()).as("check qty").isEqualTo(actual.getQty()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductQuantityUpdatableRelationshipsEquals(ProductQuantity expected, ProductQuantity actual) {
        assertThat(expected)
            .as("Verify ProductQuantity relationships")
            .satisfies(e -> assertThat(e.getWorkingUnit()).as("check workingUnit").isEqualTo(actual.getWorkingUnit()))
            .satisfies(e -> assertThat(e.getProductCategory()).as("check productCategory").isEqualTo(actual.getProductCategory()));
    }
}
