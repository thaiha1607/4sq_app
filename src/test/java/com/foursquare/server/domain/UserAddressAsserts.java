package com.foursquare.server.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAllPropertiesEquals(UserAddress expected, UserAddress actual) {
        assertUserAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAllUpdatablePropertiesEquals(UserAddress expected, UserAddress actual) {
        assertUserAddressUpdatableFieldsEquals(expected, actual);
        assertUserAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressAutoGeneratedPropertiesEquals(UserAddress expected, UserAddress actual) {
        assertThat(expected)
            .as("Verify UserAddress auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressUpdatableFieldsEquals(UserAddress expected, UserAddress actual) {
        assertThat(expected)
            .as("Verify UserAddress relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getFriendlyName()).as("check friendlyName").isEqualTo(actual.getFriendlyName()))
            .satisfies(e -> assertThat(e.getIsDefault()).as("check isDefault").isEqualTo(actual.getIsDefault()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAddressUpdatableRelationshipsEquals(UserAddress expected, UserAddress actual) {
        assertThat(expected)
            .as("Verify UserAddress relationships")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()));
    }
}
