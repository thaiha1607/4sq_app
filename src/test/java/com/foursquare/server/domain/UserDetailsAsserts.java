package com.foursquare.server.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDetailsAllPropertiesEquals(UserDetails expected, UserDetails actual) {
        assertUserDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertUserDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDetailsAllUpdatablePropertiesEquals(UserDetails expected, UserDetails actual) {
        assertUserDetailsUpdatableFieldsEquals(expected, actual);
        assertUserDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertUserDetailsMapsIdRelationshipPersistedValue(UserDetails entityToPersist, UserDetails persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDetailsAutoGeneratedPropertiesEquals(UserDetails expected, UserDetails actual) {
        assertThat(expected)
            .as("Verify UserDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDetailsUpdatableFieldsEquals(UserDetails expected, UserDetails actual) {
        assertThat(expected)
            .as("Verify UserDetails relevant properties")
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserDetailsUpdatableRelationshipsEquals(UserDetails expected, UserDetails actual) {
        assertThat(expected)
            .as("Verify UserDetails relationships")
            .satisfies(e -> assertThat(e.getWorkingUnit()).as("check workingUnit").isEqualTo(actual.getWorkingUnit()));
    }
}
